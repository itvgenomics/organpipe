import glob
import time
import os

configfile: "config/snakemake_config.yaml"

samples = config["samples"].keys()

include: "rules/check_files.smk"
include: "rules/assembly.smk"
include: "rules/annotation.smk"
include: "rules/trimming.smk"
include: "rules/genbank.smk"
include: "rules/nhmmer.smk"
include: "rules/error_correction.smk"
include: "rules/images.smk"

wildcard_constraints:
    sample = r"[A-Za-z0-9_]+",
    seed = r"[A-Za-z0-9._:-]+",
    kmer = r"\d+"

def get_output():
    out = []

    for sample in samples:

        kmers = [kmer for kmer in config["samples"][sample]["kmers"]]
        seeds = [seed for seed in config["samples"][sample]["seeds"]]

        if config["samples"][sample].get("sequencing_type", "").lower() == "short":

            if config["samples"][sample].get("run_trimming", "").lower() == "yes":
                out.append(expand("resources/{sample}/rawreads/{sample}.R{r}.trimmed.gz", sample=sample, r=[1, 2]))
                if config["samples"][sample].get("adapters", ""):
                    out.append(expand("resources/{sample}/adapters.txt", sample=sample))
            else:
                out.append(expand("resources/{sample}/rawreads/{sample}_R{r}.fastq.gz", sample=sample, r=[1, 2]))

            out.append(expand("results/{sample}/hashtable/kmer{kmer}/hash_config.txt", sample=sample, kmer=kmers))
            out.append(expand("results/{sample}/hashtable/kmer{kmer}/HASH2B_{sample}.txt", sample=sample, kmer=kmers))
            out.append(expand("results/{sample}/hashtable/kmer{kmer}/HASH2C_{sample}.txt", sample=sample, kmer=kmers))
            out.append(expand("results/{sample}/hashtable/kmer{kmer}/HASH_{sample}.txt", sample=sample, kmer=kmers))
            out.append(expand("results/{sample}/novoplasty/{seed}/kmer{kmer}/log_{sample}.txt", sample=sample, seed=seeds, kmer=kmers))
            out.append(expand("results/{sample}/assemblies/{seed}_kmer{kmer}.fasta", sample=sample, seed=seeds, kmer=kmers))

            out.append(expand("results/{sample}/pilon/{seed}_kmer{kmer}.bwa_index.check", sample=sample, seed=seeds, kmer=kmers))
            out.append(expand("results/{sample}/pilon/{seed}_kmer{kmer}.bwa_mem.check", sample=sample, seed=seeds, kmer=kmers))
            out.append(expand("results/{sample}/pilon/{seed}_kmer{kmer}.samtools_index.check", sample=sample, seed=seeds, kmer=kmers))
            out.append(expand("results/{sample}/pilon/{seed}_kmer{kmer}.pilon.check", sample=sample, seed=seeds, kmer=kmers))

            if config["samples"][sample].get("annotation", "").lower() == "yes":
                if config["samples"][sample].get("organelle", "").lower() == "mito":
                    out.append(expand("results/{sample}/mitos2/{seed}_kmer{kmer}/{seed}_kmer{kmer}.mitos2.check", sample=sample, seed=seeds, kmer=kmers))
                    out.append(expand("results/{sample}/genbanks/{seed}_kmer{kmer}.mitos2.genbank.check", sample=sample, seed=seeds, kmer=kmers))
                    out.append(expand("results/{sample}/genbanks/{seed}_kmer{kmer}.mitos2.genbank.rotated.check", sample=sample, seed=seeds, kmer=kmers))

                    if config["samples"][sample].get("run_images", "").lower() == "yes":
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.get_genbank_fastas.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.blastn.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.recruitment_plot.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.bwa_index.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.bwa_mem.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.samtools_depth.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.samtools_depth_rotated.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.depth_plot.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{sample}.mito.ogdraw.check", sample=sample))

                elif config["samples"][sample].get("organelle", "").lower() == "chloro":
                    out.append("resources/table2asn.linux64")
                    out.append(expand("results/{sample}/cpgavas2/{seed}_kmer{kmer}/{seed}_kmer{kmer}.cpgavas2.check", sample=sample, seed=seeds, kmer=kmers))
                    out.append(expand("results/{sample}/genbanks/{seed}_kmer{kmer}.cpgavas2.genbank.check", sample=sample, seed=seeds, kmer=kmers))
                    out.append(expand("results/{sample}/genbanks/{seed}_kmer{kmer}.cpgavas2.genbank.rotated.check", sample=sample, seed=seeds, kmer=kmers))

                    out.append(expand("results/{sample}/chloe/{seed}_kmer{kmer}.chloe.check", sample=sample, seed=seeds, kmer=kmers))
                    out.append(expand("results/{sample}/genbanks/{seed}_kmer{kmer}.chloe.genbank.check", sample=sample, seed=seeds, kmer=kmers))
                    out.append(expand("results/{sample}/genbanks/{seed}_kmer{kmer}.chloe.genbank.rotated.check", sample=sample, seed=seeds, kmer=kmers))

                    if config["samples"][sample].get("run_images", "").lower() == "yes":
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.get_genbank_fastas.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.blastn.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.recruitment_plot.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.bwa_index.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.bwa_mem.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.samtools_depth.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.samtools_depth_rotated.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{seed}_kmer{kmer}/{seed}_kmer{kmer}.depth_plot.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/images/{sample}.chloro.ogdraw.check", sample=sample))

                if config["samples"][sample].get("run_nhmmer", "").lower() == "yes":
                    out.append("resources/nhmmer_db.hmm")
                    out.append(expand("resources/nhmmer_db.hmm.{ext}", ext=['h3f', 'h3i', 'h3m', 'h3p']))

                    if config["samples"][sample].get("organelle", "").lower() == "mito":
                        out.append(expand("results/{sample}/nhmmer/{seed}_kmer{kmer}/{seed}_kmer{kmer}.ncRNA_sequences.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/nhmmer/{seed}_kmer{kmer}/{seed}_kmer{kmer}.ncRNA_nhmmer.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/nhmmer/{seed}_kmer{kmer}/{seed}_kmer{kmer}.intergenes_sequences.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/nhmmer/{seed}_kmer{kmer}/{seed}_kmer{kmer}.intergenes_nhmmer.check", sample=sample, seed=seeds, kmer=kmers))

                    elif config["samples"][sample].get("organelle", "").lower() == "chloro":
                        out.append(expand("results/{sample}/nhmmer/{seed}_kmer{kmer}/{seed}_kmer{kmer}.chloro.intergenes_sequences.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/nhmmer/{seed}_kmer{kmer}/{seed}_kmer{kmer}.chloro.intergenes_nhmmer.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/nhmmer/{seed}_kmer{kmer}/{seed}_kmer{kmer}.chloro.ncRNA_sequences.check", sample=sample, seed=seeds, kmer=kmers))
                        out.append(expand("results/{sample}/nhmmer/{seed}_kmer{kmer}/{seed}_kmer{kmer}.chloro.ncRNA_nhmmer.check", sample=sample, seed=seeds, kmer=kmers))

        elif config["samples"][sample].get("sequencing_type", "").lower() == "long":
            out.append(expand("resources/{sample}/rawreads/{sample}.fasta", sample=sample))

            if config["samples"][sample].get("annotation", "").lower() == "yes":
                out.append(expand("results/{sample}/mitohifi/{seed}/contigs_stats.tsv", sample=sample, seed=seeds))

                if config["samples"][sample].get("run_nhmmer", "").lower() == "yes":
                    out.append(expand("results/{sample}/nhmmer/{seed}/intergenes_sequences.check", sample=sample, seed=seeds))
                    out.append(expand("results/{sample}/nhmmer/{seed}/intergenes_nhmmer.check", sample=sample, seed=seeds))
                    out.append(expand("results/{sample}/nhmmer/{seed}/ncRNA_sequences.check", sample=sample, seed=seeds))
                    out.append(expand("results/{sample}/nhmmer/{seed}/ncRNA_nhmmer.check", sample=sample, seed=seeds))

    return out

rule all:
    input:
        get_output()
    script:
        "scripts/parse_results.py"
